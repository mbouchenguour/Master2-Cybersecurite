import json
import requests
import concurrent.futures

# üìÇ Fichiers d'entr√©e et de sortie
INPUT_FILE = "./FUSION/merged_cve_1999_test.json"       # Fichier JSON contenant les CVE
OUTPUT_FILE = "./Vulgariser/vulgarised_cve_1999_test.json"  # Fichier o√π enregistrer les r√©sultats

# ‚öôÔ∏è Choix du mod√®le Ollama install√© localement
MODEL = "deepseek-r1:1.5b"  # Remplace par le mod√®le que tu as install√©

# üìå Charger les CVE depuis un fichier JSON
def load_json(file_path):
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            return json.load(file)
    except Exception as e:
        print(f"Erreur de lecture du fichier {file_path} : {e}")
        return []

# üìå G√©n√©rer un prompt adapt√© pour vulgariser la vuln√©rabilit√©
def generate_prompt(cve):
    prompt = f"""
    Parle en fran√ßais et r√©pond uniquement explication ::
    Vulgarise cette vuln√©rabilit√© en un paragraphe tr√®s tr√®s court, clair et surtout destin√© √† une personne n'ayant aucune connaissance en cybers√©curit√©.
    Explique comment un attaquant pourrait l'exploiter et quelles en seraient les cons√©quences pour un site web.
    Ajoute une phrase proposant une solution pour att√©nuer cette vuln√©rabilit√©.

    CVE ID : {cve.get('CVE_ID', 'ID inconnu')}
    Description technique : {cve.get('Description', 'Description non disponible')}
    Score de s√©v√©rit√© : {cve.get('Base_Score', 'Score inconnu')}
    """
    return prompt.strip()

# üìå Traitement d'une seule CVE avec l'API Ollama
def process_single_cve(cve):
    print(f"Traitement de {cve.get('CVE_ID', 'ID inconnu')}...")
    prompt = generate_prompt(cve)

    url = "http://localhost:11434/api/generate"
    payload = {
        "model": MODEL,
        "prompt": prompt,
        "stream": False  # D√©sactiv√© pour recevoir une r√©ponse compl√®te d'un coup
    }

    try:
        response = requests.post(url, json=payload)
        response_json = response.json()

        # V√©rification et extraction de la r√©ponse
        if "response" in response_json:
            vulgarized_text = response_json["response"]
        else:
            vulgarized_text = "Erreur de g√©n√©ration."

    except Exception as e:
        print(f"Erreur pour {cve.get('CVE_ID', 'ID inconnu')} : {e}")
        vulgarized_text = "Erreur de g√©n√©ration."

    cve["Vulgarized_Description"] = vulgarized_text
    return cve

# üìå Traitement des CVE en parall√®le avec ThreadPoolExecutor
def vulgarize_cve(cve_data):
    with concurrent.futures.ThreadPoolExecutor(max_workers=3) as executor:
        results = executor.map(process_single_cve, cve_data)
        return list(results)

# üìå Ex√©cuter le traitement et sauvegarder les r√©sultats
def process_cve_vulgarization():
    cve_data = load_json(INPUT_FILE)
    if not cve_data:
        print("Aucune donn√©e √† traiter.")
        return

    vulgarized_cve_data = vulgarize_cve(cve_data)

    try:
        with open(OUTPUT_FILE, "w", encoding="utf-8") as json_out:
            json.dump(vulgarized_cve_data, json_out, indent=4, ensure_ascii=False)
        print(f"‚úÖ Vulgarisation termin√©e ! R√©sultats enregistr√©s dans {OUTPUT_FILE}")
    except Exception as e:
        print(f"Erreur lors de l'√©criture du fichier {OUTPUT_FILE} : {e}")

# üìå Lancer le script
if __name__ == "__main__":
    process_cve_vulgarization()
