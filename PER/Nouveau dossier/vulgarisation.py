import json
import ollama

# ğŸ“‚ Fichier d'entrÃ©e et de sortie
INPUT_FILE = "./FUSION/merged_cve_1999_test.json"  # Nom du fichier JSON contenant les CVE
OUTPUT_FILE = "./Vulgariser/vulgarised_cve_1999_test.json"  # Fichier oÃ¹ enregistrer les prompts gÃ©nÃ©rÃ©s

# ğŸ“Œ Charger les CVE depuis un fichier JSON
def load_json(file_path):
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            return json.load(file)
    except Exception as e:
        print(f"Erreur de lecture du fichier {file_path}: {e}")
        return []

# ğŸ“Œ GÃ©nÃ©rer un prompt pour chaque CVE
def generate_prompt(cve):
    prompt = f"""
    Parle en franÃ§ais et rÃ©pond uniquement explication ::
    Vulgarise cette vulnÃ©rabilitÃ© en un paragraphe trÃ¨s trÃ¨s court, clair et surtout destinÃ© Ã  une personne n'ayant aucune connaissance en cybersÃ©curitÃ©.
    Explique comment un attaquant pourrait l'exploiter et quelles en seraient les consÃ©quences pour un site web.
    Ajoute une phrase proposant une solution pour attÃ©nuer cette vulnÃ©rabilitÃ©.

    CVE ID : {cve.get('CVE_ID', 'ID inconnu')}
    Description technique : {cve.get('Description', 'Description non disponible')}
    Score de sÃ©vÃ©ritÃ© : {cve.get('Base_Score', 'Score inconnu')}
    """
    return prompt

# ğŸ“Œ Utiliser Ollama pour vulgariser chaque CVE
def vulgarize_cve(cve_data):
    vulgarized_cve_data = []

    for cve in cve_data:
        print(f"Traitement de {cve['CVE_ID']}...")

        # GÃ©nÃ©rer le prompt
        prompt = generate_prompt(cve)

        try:
            # Envoyer Ã  Ollama (local)
            response = ollama.chat(
                model="deepseek-r1:1.5b",
                messages=[{"role": "user", "content": prompt}],
            )
            vulgarized_text = response["message"]["content"]
        except Exception as e:
            print(f"Erreur pour {cve['CVE_ID']}: {e}")
            vulgarized_text = "Erreur de gÃ©nÃ©ration."

        # Ajouter le texte gÃ©nÃ©rÃ©
        cve["Vulgarized_Description"] = vulgarized_text
        vulgarized_cve_data.append(cve)

    return vulgarized_cve_data

# ğŸ“Œ ExÃ©cuter le traitement et sauvegarder les rÃ©sultats
def process_cve_vulgarization():
    cve_data = load_json(INPUT_FILE)

    if not cve_data:
        print("Aucune donnÃ©e Ã  traiter.")
        return

    vulgarized_cve_data = vulgarize_cve(cve_data)

    # ğŸ“Œ Sauvegarde des rÃ©sultats
    with open(OUTPUT_FILE, "w", encoding="utf-8") as json_out:
        json.dump(vulgarized_cve_data, json_out, indent=4, ensure_ascii=False)

    print(f"âœ… Vulgarisation terminÃ©e ! RÃ©sultats enregistrÃ©s dans {OUTPUT_FILE}")

# ğŸ“Œ Lancer le script
if __name__ == "__main__":
    process_cve_vulgarization()