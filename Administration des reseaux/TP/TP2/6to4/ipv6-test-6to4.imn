node n1 {
    type router
    model host
    network-config {
	hostname h1
	!
	interface eth0
	 mac address 00:00:00:00:00:01
	 ipv6 address fd00::01:0000:00ff:fe00:0001/64
	!
    }
    canvas c1
    iconcoords {80.0 162.0}
    labelcoords {80.0 194.0}
    interface-peer {eth0 n2}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via fd00::01:0000:00ff:fe00:0101
	
	}
    }
    services {DefaultRoute SSH}
}

node n2 {
    type lanswitch
    network-config {
	hostname s1
	!
    }
    canvas c1
    iconcoords {250.0 78.0}
    labelcoords {250.0 102.0}
    interface-peer {e0 n1}
    interface-peer {e1 n7}
    interface-peer {e2 n3}
}

node n3 {
    type router
    model router
    network-config {
	hostname R1
	!
	interface eth1
	 ip address 10.0.0.1/24
	!
	interface eth0
	 mac address 00:00:00:00:01:01
	 ipv6 address fd00::01:0000:00ff:fe00:0101/64
	!
    }
    canvas c1
    iconcoords {423.0 77.0}
    labelcoords {423.0 109.0}
    interface-peer {eth0 n2}
    services {OSPFv2 zebra IPForward}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	dirs=('/usr/local/etc/quagga', '/var/run/quagga', '/etc/quagga', )
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth1
	  ip address 10.0.0.1/24
	  ip ospf network point-to-point
	  ip ospf hello-interval 2
	  ip ospf dead-interval 6
	  ip ospf retransmit-interval 5
	!
	
	router ospf
	  router-id 10.0.0.1
	  network 10.0.0.1/24 area 0
	!
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('enablerout.sh', )
	cmdup=('bash enablerout.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:enablerout.sh
	custom-command enablerout.sh
	config {
	#!/bin/bash
	
	sleep 1
	ip -6 r a default via fd00::03:0000:00ff:fe00:0201 dev eth1
	}
    }
    interface-peer {eth1 n4}
}

node n4 {
    type router
    model router
    network-config {
	hostname R2
	!
	interface eth1
	 ip address 10.0.2.1/24
	!
	interface eth0
	 ip address 10.0.0.2/24
	!
	interface eth2
	 mac address 00:00:00:00:02:03
	 ipv6 address fd00::02:0000:00ff:fe00:0203/64
	!
    }
    canvas c1
    iconcoords {667.0 76.0}
    labelcoords {667.0 108.0}
    interface-peer {eth2 n6}
    services {OSPFv2 zebra IPForward}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	dirs=('/usr/local/etc/quagga', '/var/run/quagga', '/etc/quagga', )
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ip address 10.0.0.2/24
	  ip ospf network point-to-point
	  ip ospf hello-interval 2
	  ip ospf dead-interval 6
	  ip ospf retransmit-interval 5
	!
	interface eth1
	  ip address 10.0.2.1/24
	  ip ospf network point-to-point
	  ip ospf hello-interval 2
	  ip ospf dead-interval 6
	  ip ospf retransmit-interval 5
	!
	router ospf
	  router-id 10.0.0.2
	  network 10.0.0.2/24 area 0
	  network 10.0.2.1/24 area 0
	!
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('enablerout.sh', )
	cmdup=('bash enablerout.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:enablerout.sh
	custom-command enablerout.sh
	config {
	#!/bin/bash
	
	sleep 1
	ip -6 r a default via fd00::03:0000:00ff:fe00:0102 dev eth0
	}
    }
    interface-peer {eth0 n3}
    interface-peer {eth1 n5}
}

node n5 {
    type router
    model router
    network-config {
	hostname R3
	!
	interface eth2
	 mac address 00:00:00:00:03:03
	 ipv6 address fd00::03:0000:00ff:fe00:0303/64
	!
	interface eth1
	 ip address 10.0.2.2/24
	!
    }
    canvas c1
    iconcoords {542.0 297.0}
    labelcoords {542.0 329.0}
    services {OSPFv2 zebra IPForward}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	dirs=('/usr/local/etc/quagga', '/var/run/quagga', '/etc/quagga', )
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	
	interface eth1
	  ip address 10.0.2.2/24
	  ip ospf network point-to-point
	  ip ospf hello-interval 2
	  ip ospf dead-interval 6
	  ip ospf retransmit-interval 5
	!
	router ospf
	  router-id 10.0.2.2
	  network 10.0.2.2/24 area 0
	!
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('enablerout.sh', )
	cmdup=('bash enablerout.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:enablerout.sh
	custom-command enablerout.sh
	config {
	#!/bin/bash
	
	ip -6 r a fd00:0:0:1::/64 via fd00::04:0000:00ff:fe00:0103 dev eth1
	ip -6 r a fd00:0:0:2::/64 via fd00::05:0000:00ff:fe00:0202 dev eth0
	ip -6 r a default via fd00::04:0000:00ff:fe00:0103 dev eth1
	}
    }
    interface-peer {eth1 n4}
    interface-peer {eth2 n8}
}

node n6 {
    type router
    model host
    network-config {
	hostname h3
	!
	interface eth0
	 mac address 00:00:00:00:00:03
	 ipv6 address fd00::02:0000:00ff:fe00:0003/64
	!
    }
    canvas c1
    iconcoords {865.0 165.0}
    labelcoords {865.0 197.0}
    interface-peer {eth0 n4}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via fd00::02:0000:00ff:fe00:0203
	
	}
    }
    services {DefaultRoute SSH}
}

node n7 {
    type router
    model host
    network-config {
	hostname h2
	!
	interface eth0
	 mac address 00:00:00:00:00:02
	 ipv6 address fd00::01:0000:00ff:fe00:0002/64
	!
    }
    canvas c1
    iconcoords {248.0 252.0}
    labelcoords {248.0 284.0}
    interface-peer {eth0 n2}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via fd00::01:0000:00ff:fe00:0101
	
	}
    }
    services {DefaultRoute SSH}
}

node n8 {
    type router
    model host
    network-config {
	hostname n4
	!
	interface eth0
	 mac address 00:00:00:00:00:04
	 ipv6 address fd00::03:0000:00ff:fe00:0004/64
	!
    }
    canvas c1
    iconcoords {761.0 387.0}
    labelcoords {761.0 419.0}
    interface-peer {eth0 n5}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via fd00::03:0000:00ff:fe00:0303
	
	}
    }
    services {DefaultRoute SSH}
}

link l1 {
    nodes {n1 n2}
    bandwidth 0
}

link l2 {
    nodes {n7 n2}
    bandwidth 0
}

link l3 {
    nodes {n2 n3}
    bandwidth 0
}

link l7 {
    nodes {n4 n6}
    bandwidth 0
}

link l4 {
    nodes {n3 n4}
    bandwidth 0
}

link l6 {
    nodes {n4 n5}
    bandwidth 0
}

link l8 {
    nodes {n5 n8}
    bandwidth 0
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names yes
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

